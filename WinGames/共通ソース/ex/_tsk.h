/*----------------------------------------------------------------------*
| <<< タスク関係 >>>
*----------------------------------------------------------------------*/
#ifndef	__TSK_H
#define	__TSK_H

#define	TSK_MAX		(1024 *	1)		// タスクの登録総数
	enum							// タスクのプライオリティ
	{
		TSK_07,						// これは一番上に置いてください。
		TSK_06,
		TSK_05,
		TSK_04,
		TSK_03,
		TSK_02,
		TSK_01,
		TSK_00,
		TSK_MOVE,					// 移動タスク
		TSK_ALL,					// 必ず一番最後においてください。
	};
#define	TSK_PRI_MAX	TSK_ALL			// 登録タスクのプライオリティ最大数

#define	TSK_OFF		0				// 初期化用
#define	TSK_USE		64				// 使用フラグ
#define	TSK_SAVE	128				// 終了させないフラグ
									// タスクワークのサイズ(uchar)
#define	TSK_WSIZE	(2048 / sizeof(uint))
									// タスクのワークサイズを調べる
#define	TSK_SIZE_CHECK(__work)														\
	{																				\
		if((TSK_WSIZE *	sizeof(uint)) <	sizeof(__work))								\
		{																			\
			sys_error(#__work "が %d バイト、タスクワークサイズオーバーです。",		\
					sizeof(__work) - (TSK_WSIZE	* sizeof(uint)));					\
		}																			\
	}


struct	TSK_WORK				// タスクのワーク
{
	uchar	ucStat;					// 動作ステータス
									// BIT0-5 :	プライオリティ
									// BIT6	  :	ON時使用中
									// BIT7	  :	ON時tsk_mode_chg_pri の
									//			対象外になる
	uchar	ucMode;					// 内部動作情報（ルーチン内で使用）
	ushort	usID;
	short	sBefore;				// 前部リンク先	＊−１なら先頭
	short	sAfter;					// 後部リンク先	＊−１なら最後尾
	short	sDelay;					// ディレイカウンタ
	union
	{
		uint	uiWork[TSK_WSIZE];		// ユーザー用
		int		iWork[ TSK_WSIZE];		// ユーザー用
	};
	uint	uiAdrs;					// 登録タスクのコールアドレス
};


#define	TSK_PRI_MASK	(BIT5 -	1)	// プライオリティ抽出時のマスク


enum
{
	TSK_INIT  =	0x00,						// ルーチン内部情報（初期化）
	TSK_MAIN,								// ルーチン内部情報（実行部）
											// 0x02	- 0xF0 まではユーザー指定
	TSK_PAUSE =	0xFE,						// ルーチン内部情報（ポーズ）
	TSK_END									// ルーチン内部情報（終了）
};

#define	TSK_PRI_GET(___t)		(___t->ucStat	& TSK_PRI_MASK)


#define	TSK_START_END	80000.0f		// tsk_start_float 時にデータを受け渡すときの終端

extern	TSK_WORK	tsk_dummy[1];			// エラー用ダミーバッファ


/*----------------------------------------------------------------------*
| <<< タスク処理初期化 >>>
|	戻り値	FALSE = 初期化失敗
*----------------------------------------------------------------------*/
extern	BOOL	tsk_init(void);

/*----------------------------------------------------------------------*
| <<< タスク終了処理 >>>
*----------------------------------------------------------------------*/
extern	void	tsk_free(void);

/*----------------------------------------------------------------------*
| <<< プライオリティ毎のタスク初期化処理登録 >>>
|	入力	uiPri  = 登録プライオリティ
|			*pAdr  = 実行アドレス			TSK_PRI0 〜	TSK_PRI7
|			uiID   = 値受け渡しに使用		※ユーザーが自由に使ってよい
|			iDelay = 実行までの遅延タイム	-1 で即実行
*----------------------------------------------------------------------*/
extern	TSK_WORK	*tsk_begin_start(uint uiPri, void *pAdr, uint uiID, int iDelay);

/*----------------------------------------------------------------------*
| <<< プライオリティ毎のタスク初期化処理開放 >>>
|	入力	uiPri  = 登録プライオリティ
*----------------------------------------------------------------------*/
extern	void	tsk_begin_free(uint uiPri);

/*----------------------------------------------------------------------*
| <<< プライオリティ毎のタスク終了処理登録 >>>
|	入力	uiPri  = 登録プライオリティ
|			*pAdr  = 実行アドレス			TSK_PRI0 〜	TSK_PRI7
|			uiID   = 値受け渡しに使用		※ユーザーが自由に使ってよい
|			iDelay = 実行までの遅延タイム	-1 で即実行
*----------------------------------------------------------------------*/
extern	TSK_WORK	*tsk_end_start(uint uiPri, void *pAdr, uint uiID, int iDelay);

/*----------------------------------------------------------------------*
| <<< プライオリティ毎のタスク終了処理開放 >>>
|	入力	uiPri  = 登録プライオリティ
*----------------------------------------------------------------------*/
extern	void	tsk_end_free(uint uiPri);

/*----------------------------------------------------------------------*
| <<< タスク登録 >>>
|	入力	uiPri  = 登録プライオリティ
|			*pAdr  = 実行アドレス			tsk.h に記述
|			uiID   = 値受け渡しに使用		※ユーザーが自由に使ってよい
|			iDelay = 実行までの遅延タイム	-1 で即実行
*----------------------------------------------------------------------*/
extern	TSK_WORK	*tsk_start(uint uiPri, void *pAdr, uint uiID, int iDelay);

/*----------------------------------------------------------------------*
| <<< タスク削除 >>>
|	入力	t =	タスクのワークアドレス
*----------------------------------------------------------------------*/
extern	void	tsk_end(TSK_WORK *t);

/*----------------------------------------------------------------------*
| <<< 指定プライオリティのタスクモードを全て変更する >>>
|	入力	uiPri  = 登録プライオリティ
|			uiMode = 変更モード
*----------------------------------------------------------------------*/
extern	void	tsk_mode_change_priority(uint uiPri, uint uiMode);

/*----------------------------------------------------------------------*
| <<< 直前に登録されたタスクを実行 >>>
*----------------------------------------------------------------------*/
extern	void	tsk_quick_call(void);

/*----------------------------------------------------------------------*
| <<< プライオリティ変更 >>>
|	入力	t     = タスクのワークアドレス
|			uiPri = 登録プライオリティ			
*----------------------------------------------------------------------*/
extern	void	tsk_change_priority(TSK_WORK *t, uint uiPri);

/*----------------------------------------------------------------------*
| <<< タスクに登録されたプログラムの実行 >>>
|	入力	uiPri = 登録プライオリティ
|
|	※ iPri に登録されたタスクを全て実行する
|
*----------------------------------------------------------------------*/
extern	void	tsk_call(uint uiPri);

/*----------------------------------------------------------------------*
| <<< タスクの状態をチェック >>>
|
|	※ この関数は毎周期呼び出してください。内部でタスクの終了処理を行っています。
|
*----------------------------------------------------------------------*/
extern	void	tsk_check(void);


#endif										// end of _TSK_H

