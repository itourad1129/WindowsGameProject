//
//	プレイヤー
//

#include	"main.h"

//--- 定数定義 -----------------------------------------------------------------------------------------
#define SPEED_		0.5f			// 移動速度
#define X_AREA		3.0f			// 横のサイズ

//--- 変数定義 -----------------------------------------------------------------------------------------
cPlayer *player;					// プレイヤーワーク


/*--------------------------------------------------------------------------------*
|	<<< 初期化 >>>
*--------------------------------------------------------------------------------*/
void	cPlayer::Init(void)
{
	m_vecPos	= VEC3(0, -4, 0);			// 座標
	m_vecSpeed	= VEC3(0,  0, 0);			// 速度
	m_iDamageTime = 0;
	m_iHp = 100;
	m_iScore = 0;

	m_vecBak	= m_vecPos;					// 初回に残像が出ないようにする
}

/*-------------------------------------------------------------------------------------*
|<<< メイン >>>
*-------------------------------------------------------------------------------------*/
void	cPlayer::Main(void)
{
	//--- 移動 --------------------------------------------------------------
	if(pad.bKeyClick[KEY_LEFT ]){ m_vecSpeed.x = -SPEED_; snd_play(SND_MOVE);}
	if(pad.bKeyClick[KEY_RIGHT]){ m_vecSpeed.x =  SPEED_; snd_play(SND_MOVE);}

	m_vecPos.x += m_vecSpeed.x;
	if(m_vecPos.x < -X_AREA){ m_vecPos.x = -X_AREA;	m_vecSpeed.x = 0;}
	if(m_vecPos.x >  X_AREA){ m_vecPos.x =  X_AREA;	m_vecSpeed.x = 0;}
	if(m_vecPos.x ==  0.0f ){ m_vecPos.x =  0.0f  ;	m_vecSpeed.x = 0;}


//---　行列計算 -----------------------------------------------
MTX			mtxTrans;
									// 平行移動
D3DXMatrixTranslation(&mtxTrans, &m_vecPos);
m_mtxWorld = mtxTrans;

//--- 移動したときのみ残像描画 -----------------------------------------------
if(m_vecBak.x != m_vecPos.x)				// プレイや−は前回と同じ場所か？
{
	MTX		mtxUpdate;
	D3DXMatrixTranslation(&mtxUpdate, 0, -0.3f, 0);	// 残像の更新行列作成
	AfterimageSet(X_PLAYER, &m_mtxWorld, &mtxUpdate);// 違うならば残像の呼び出し
	m_vecBak.x = m_vecPos.x;
}

}

/*------------------------------------------------------------------------------*
| <<< 描画 >>>
*------------------------------------------------------------------------------*/
void	cPlayer::Draw(void)
{

	d3_3d_draw(X_PLAYER, &m_mtxWorld);
	Printf(0, 16, 16, "HP:%d", m_iHp);
	Printf(0, 48, 16, "SCORE:%d", m_iScore);
}

//--- 以下、一括処理 -------------------------------------------------------------------------------------
/*--------------------------------------------------------------------------*
| <<< プレイヤー初期化 >>>
*-----------------------------------------------------------------------------*/
void	PlayerInit(void)
{
	// メモリ確保
	if(player == NULL)
	{
		player = new cPlayer;
	}
	player->Init();
}
/*---------------------------------------------------------------------------*
| <<< プレイヤーメイン >>>
*----------------------------------------------------------------------------*/
void	PlayerMain(void)
{
	player->Main();
	player->Damage();
}

/*---------------------------------------------------------------------------*
| <<< プレイヤー描画 >>>
*---------------------------------------------------------------------------*/
void	PlayerDraw(void)
{
	player->Draw();
}
/*------------------------------------------------------------------------*
| <<< ダメージ >>>
|	※ ダメージ時、d3.vecEye(どこをみるかの座標)をぐらぐらさせている
*-------------------------------------------------------------------------*/
void	cPlayer::Damage(void)
{
	//--- ダメージ時 -------------------------------------------------
	if(m_iDamageTime > 0)
	{
		m_iDamageTime--;			// ダメージ時間減算
									// 注視座標を揺らす
		float	a = sinf((float)m_iDamageTime * 30.f) * 0.2f - 0.25f;
		d3.vecEye = VEC3(a, a, a);
	}
	//--- ノーダメージ時 ---------------------------------------------
	else
	{
		d3.vecEye = VEC3(0, 0, 0);
	}
}


