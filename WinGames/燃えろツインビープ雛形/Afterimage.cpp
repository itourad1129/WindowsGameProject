//
//	残像処理
//

#include	"main.h"

//--- 定数定義 ----------------------------------------------------------------------------
#define AI_TIME			255					// 表示時間
#define AI_FADE_SPEED	8					// フェード速度

//--- 変数定義 ---------------------------------------------------------------------------
static	cAfterimage *ai;

/*---------------------------------------------------------------*
| <<< 初期化 >>>
*----------------------------------------------------------------*/
void		cAfterimage::Init(void)
{
	m_iTime = 0;
}

/*----------------------------------------------------------------*
|	<<< メイン >>>
*----------------------------------------------------------------*/
void		cAfterimage::Main(void)
{
	// フェード計算
	m_iTime -= AI_FADE_SPEED;			// タイム減算、8は適当。値が小さいと表示時間が長くなります。
	if(m_iTime <= 0){ m_iTime = 0;}		// タイムが 0 または マイナスならば、処理終了
	
	// 行列更新
	m_mtxWorld = m_mtxWorld * m_mtxUpDate;
}

/*-------------------------------------------------------------*
| <<< 描画 >>>
*------------------------------------------------------------*/
void	cAfterimage::Draw(void)
{
										// 描画、↓は半透明を掛けている。
	d3_3d_draw(m_iMeshNum, &m_mtxWorld, (float)m_iTime / 255.0f);
}

//--- 以下、一括処理 ----------------------------------------------------------------

/*----------------------------------------------------------------*
| <<< 残像初期化 >>>
*----------------------------------------------------------------*/
void	AfterimageInit(void)
{
	// メモリ確保
	if(ai == NULL)
	{
		ai = new cAfterimage[AFTERIMAGE_MAX];
	}

	// 初期化
	for(int i = 0; i < AFTERIMAGE_MAX; i++)
	{
		ai[i].Init();
	}
}

/*-------------------------------------------------------------------*
| <<< 残像メイン >>>
*--------------------------------------------------------------------*/
void	AfterimageMain(void)
{
	for(int i = 0; i < AFTERIMAGE_MAX; i++)
	{
		if(ai[i].m_iTime > 0){ ai[i].Main();}
	}
}

/*-------------------------------------------------------------------*
| <<< 残像描画 >>>
*--------------------------------------------------------------------*/
void	AfterimageDraw(void)
{		
	d3_stat_alpha_set(true);		// 半透明オン
	for(int i = 0; i < AFTERIMAGE_MAX; i++)
	{
		if(ai[i].m_iTime > 0){ ai[i].Draw();}
	}
}

/*-----------------------------------------------------------------------*
| <<< 残像登録 >>>
|	入力		iMeshNum	= 残像のメッシュ番号
|				pmtxWorld	= 残像のワールド座標
|				pmtxUpdate	= 更新行列
*-----------------------------------------------------------------------*/
void	AfterimageSet(int	iMeshNum, MTX *pmtxWorld, MTX *pmtxUpdate)
{
	for(int i = 0; i < AFTERIMAGE_MAX; i++)
	{
		cAfterimage *p = &ai[i];

		// 時間が0のものを探し登録する
		if(p->m_iTime == 0)
		{
			p->m_mtxWorld	= *pmtxWorld;		// ワールド行列
			p->m_mtxUpDate	= *pmtxUpdate;		// 更新行列
			p->m_iMeshNum	= iMeshNum;			// ３Dモデル番号
			p->m_iTime		= AI_TIME;			// 残像の表示時間（０以外ならば使用中となる）
			return;
		}
	}
}

